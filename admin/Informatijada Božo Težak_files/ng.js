angular.module('TestRunnerApp',[]).factory('TestRunner',function(){			return function ( setup , tests , teardown ) {					var t = {};				t = {			_pending:0,			_callee:"(unknown callee)",						setup:setup || function (){ return null; },			teardown:teardown || function( testObject ) {},			tests:tests,			assert: function( a , b ) {				if ( JSON.stringify(a) !== JSON.stringify(b) )					throw ( 						 "exception >>> ASSERT FAILED: "						+ t._callee 						+ "\n - expected:" 						+ JSON.stringify(a) 						+ "\n - measured:" + JSON.stringify(b) 					);			},			assertAsync:function( expected , func , timeout ){				if (!timeout)					timeout = 1000;									var waitingOnTimeout = true;								var expected = expected;				var func = func;				var result;								var callee = t._callee;									t._pending++;				setTimeout( function(){						var old_calle;					try {						result = func();						old_callee = t._callee 						t._callee = callee;												t.assert( expected , result );												t._callee = old_callee;						t._pending--;					} catch (ex){													t._callee = old_callee;						t._pending--;												throw (ex);					}									},timeout);			},			run:function(){							var i = 0, len = 0;								var testObjects = [];								for (var x in t.tests)					len++;								for (var x in t.tests)				{					i++					console.log( [i, len , x] );					t._callee = x;					var testObject = t.setup();					testObjects.push( testObject )					t.tests[x]( testObject , t );									}								var interval = setInterval(function(){					if ( t._pending == 0 )					{												for (var x in testObjects)													t.teardown( testObjects[x] );												clearInterval(interval);												console.info("Tests completed");											} else {						console.warn("Still running tests:",t._pending);					}				},1000);			}		};								return t;				};})